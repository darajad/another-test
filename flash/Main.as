/* Drawing Application *//* Developed by Carlos Yanez */package {	import PNGEncoder;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.DisplayObject;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldType;	import flash.text.TextFieldAutoSize;	import flash.display.BitmapData;	import flash.geom.ColorTransform;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.utils.ByteArray;	import flash.net.FileReference;	public class Main extends MovieClip	{		/* Variables */		/* Pencil Tool shape, everything drawed with this tool and eraser is stored inside board.pencilDraw */		var pencilDraw:Shape = new Shape();		/* Text format */		var textformat:TextFormat = new TextFormat();		/* Colors */		var colorsBmd:BitmapData;		var pixelValue:uint;		var activeColor:uint = 0x000000;		/* Save dialog instance */		var saveDialog:SaveDialog;		/* Active var, to check wich tool is active */		var active:String;		/* Shape size color */		var ct:ColorTransform = new ColorTransform();		public function Main():void		{			textformat.font = "Quicksand Bold Regular";			textformat.bold = true;			textformat.size = 16;			convertToBMD();			addListeners();			/* Hide tools highlights */			pencil.visible = false;			hideTools(eraser, txt);		}		/* Pencil Tool */		private function PencilTool(e:MouseEvent):void		{			/* Quit active tool */			quitActiveTool();			/* Set to Active */			active = "Pencil";			/* Listeners */			board.addEventListener(MouseEvent.MOUSE_DOWN, startPencilTool);			board.addEventListener(MouseEvent.MOUSE_UP, stopPencilTool);			/* Highlight */			highlightTool(pencil);			hideTools(eraser, txt);			ct.color = activeColor;			shapeSize.transform.colorTransform = ct;		}		private function startPencilTool(e:MouseEvent):void		{			pencilDraw = new Shape();			board.addChild(pencilDraw);			pencilDraw.graphics.moveTo(mouseX, mouseY);			pencilDraw.graphics.lineStyle(shapeSize.width, activeColor);			board.addEventListener(MouseEvent.MOUSE_MOVE, drawPencilTool);		}		private function drawPencilTool(e:MouseEvent):void		{			pencilDraw.graphics.lineTo(mouseX, mouseY);		}		private function stopPencilTool(e:MouseEvent):void		{			board.removeEventListener(MouseEvent.MOUSE_MOVE, drawPencilTool);		}		/* Eraser Tool */		private function EraserTool(e:MouseEvent):void		{			/* Quit active tool */			quitActiveTool();			/* Set to Active */			active = "Eraser";			/* Listeners */			board.addEventListener(MouseEvent.MOUSE_DOWN, startEraserTool);			board.addEventListener(MouseEvent.MOUSE_UP, stopEraserTool);			/* Highlight */			highlightTool(eraser);			hideTools(pencil, txt);			ct.color = 0x000000;			shapeSize.transform.colorTransform = ct;		}		private function startEraserTool(e:MouseEvent):void		{			pencilDraw = new Shape();			board.addChild(pencilDraw);			pencilDraw.graphics.moveTo(mouseX, mouseY);			pencilDraw.graphics.lineStyle(shapeSize.width, 0xFFFFFF);			board.addEventListener(MouseEvent.MOUSE_MOVE, drawEraserTool);		}		private function drawEraserTool(e:MouseEvent):void		{			pencilDraw.graphics.lineTo(mouseX, mouseY);		}		function stopEraserTool(e:MouseEvent):void		{			board.removeEventListener(MouseEvent.MOUSE_MOVE, drawEraserTool);		}		/* Text Tool */		private function TextTool(e:MouseEvent):void		{			/* Quit active tool */			quitActiveTool();			/* Set to Active */			active = "Text";			/* Listener */			board.addEventListener(MouseEvent.MOUSE_UP, writeText);			/* Highlight */			highlightTool(txt);			hideTools(pencil, eraser);		}		private function writeText(e:MouseEvent):void		{			var textfield = new TextField();			textfield.type = TextFieldType.INPUT;			textfield.autoSize = TextFieldAutoSize.LEFT;			textfield.selectable = false;			textfield.defaultTextFormat = textformat;			textfield.textColor = activeColor;			textfield.x = mouseX;			textfield.y = mouseY;			stage.focus = textfield;			board.addChild(textfield);		}		/* Save */		private function export():void		{			var bmd:BitmapData = new BitmapData(600, 290);			bmd.draw(board);			var ba:ByteArray = PNGEncoder.encode(bmd);			var file:FileReference = new FileReference();			file.addEventListener(Event.COMPLETE, saveSuccessful);			file.save(ba, "MyDrawing.png");		}		private function saveSuccessful(e:Event):void		{			saveDialog = new SaveDialog();			addChild(saveDialog);			saveDialog.closeBtn.addEventListener(MouseEvent.MOUSE_UP, closeSaveDialog);		}		private function closeSaveDialog(e:MouseEvent):void		{			removeChild(saveDialog);		}		private function save(e:MouseEvent):void		{			export();		}		/* Clear Tool */		private function clearBoard(e:MouseEvent):void		{			/* Create a blank rectangle on top of everything but board */			var blank:Shape = new Shape();			blank.graphics.beginFill(0xFFFFFF);			blank.graphics.drawRect(0, 0, board.width, board.height);			blank.graphics.endFill();			board.addChild(blank);		}		/* Default colors function */		private function convertToBMD():void		{			colorsBmd = new BitmapData(colors.width,colors.height);			colorsBmd.draw(colors);		}		private function chooseColor(e:MouseEvent):void		{			pixelValue = colorsBmd.getPixel(colors.mouseX,colors.mouseY);			activeColor = pixelValue;//uint can be RGB!			ct.color = activeColor;			shapeSize.transform.colorTransform = ct;		}		/* Quit active function */		private function quitActiveTool():void		{			switch (active)			{				case "Pencil" :					board.removeEventListener(MouseEvent.MOUSE_DOWN, startPencilTool);					board.removeEventListener(MouseEvent.MOUSE_UP, stopPencilTool);				case "Eraser" :					board.removeEventListener(MouseEvent.MOUSE_DOWN, startEraserTool);					board.removeEventListener(MouseEvent.MOUSE_UP, stopEraserTool);				case "Text" :					board.removeEventListener(MouseEvent.MOUSE_UP, writeText);				default :			}		}				/* Highlight active Tool */		private function highlightTool(tool:DisplayObject):void		{			tool.visible=true;		}		private function hideTools(tool1:DisplayObject, tool2:DisplayObject):void		{			tool1.visible=false;			tool2.visible=false;		}		/* Change shape size */		private function changeShapeSize(e:MouseEvent):void		{			if (shapeSize.width >= 50)			{				shapeSize.width = 1;				shapeSize.height = 1;				/* TextFormat */				textformat.size = 16;			}			else			{				shapeSize.width += 5;				shapeSize.height=shapeSize.width;				/* TextFormat */				textformat.size+=5;			}		}		private function addListeners():void		{			pencilTool.addEventListener(MouseEvent.MOUSE_UP, PencilTool);			eraserTool.addEventListener(MouseEvent.MOUSE_UP, EraserTool);			textTool.addEventListener(MouseEvent.MOUSE_UP, TextTool);			saveButton.addEventListener(MouseEvent.MOUSE_UP, save);			clearTool.addEventListener(MouseEvent.MOUSE_UP, clearBoard);			colors.addEventListener(MouseEvent.MOUSE_UP, chooseColor);			sizePanel.addEventListener(MouseEvent.MOUSE_UP, changeShapeSize);			shapeSize.addEventListener(MouseEvent.MOUSE_UP, changeShapeSize);		}	}}